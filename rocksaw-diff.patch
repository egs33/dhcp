diff --git a/rocksaw-1.1.0/build.properties b/rocksaw-1.1.0/build.properties
index cbb93d4..0622660 10644
--- a/rocksaw-1.1.0/build.properties
+++ b/rocksaw-1.1.0/build.properties
@@ -76,8 +76,8 @@ jni.ldflags=
 javac.debug=on
 javac.optimize=off
 javac.deprecation=on
-javac.source=1.3
-javac.target=1.3
+javac.source=17
+javac.target=17
 javac.source.example=1.5
 javac.target.example=1.5
 javac.assertionFlag=-ea
diff --git a/rocksaw-1.1.0/src/java/com/savarese/rocksaw/net/RawSocket.java b/rocksaw-1.1.0/src/java/com/savarese/rocksaw/net/RawSocket.java
index 0335f4f..a456104 10644
--- a/rocksaw-1.1.0/src/java/com/savarese/rocksaw/net/RawSocket.java
+++ b/rocksaw-1.1.0/src/java/com/savarese/rocksaw/net/RawSocket.java
@@ -42,6 +42,8 @@ public class RawSocket {
 
   private native static int __PF_INET();
   private native static int __PF_INET6();
+  private native static int __AF_PACKET();
+  private native static int __ETH_P_IP();
 
   /**
    * A protocol family constant for {@link #open} indicating IPv4.
@@ -54,6 +56,8 @@ public class RawSocket {
    * <em>This should be moved to another class.</em>
    */
   public static final int PF_INET6;
+  public static final int AF_PACKET;
+  public static final int ETH_P_IP;
 
   /**
    * Initializes any system resources used by the RockSaw library.
@@ -78,13 +82,15 @@ public class RawSocket {
       throw new UnsatisfiedLinkError(__getErrorMessage());
 
     Runtime.getRuntime().addShutdownHook(new Thread() {
-        public void run() {
-          __RockSawShutdown();
-        }
-      });
+      public void run() {
+        __RockSawShutdown();
+      }
+    });
 
     PF_INET  = __PF_INET();
     PF_INET6 = __PF_INET6();
+    AF_PACKET = __AF_PACKET();
+    ETH_P_IP = __ETH_P_IP();
   }
 
   private static final int __UNDEFINED = -1;
@@ -152,7 +158,7 @@ public class RawSocket {
   }
 
   private static void __throwInterruptedIOException()
-    throws InterruptedIOException
+          throws InterruptedIOException
   {
     throw new InterruptedIOException(__getErrorMessage());
   }
@@ -182,6 +188,7 @@ public class RawSocket {
    */
   public native static final int getProtocolByName(String name);
 
+
   private native static
   int __query_routing_interface(int socket, int family,
                                 byte[] destination, byte[] source);
@@ -204,10 +211,10 @@ public class RawSocket {
    */
   public void
   getSourceAddressForDestination(InetAddress destination, byte[] source)
-    throws IOException
+          throws IOException
   {
     if(__query_routing_interface(__socket, __family,
-                                 destination.getAddress(), source) < 0)
+            destination.getAddress(), source) < 0)
       __throwIOException();
   }
 
@@ -223,7 +230,7 @@ public class RawSocket {
    * @exception IOException If an error occurs while opening the socket.
    */
   public void open(int protocolFamily, int protocol)
-    throws IllegalStateException, IOException
+          throws IllegalStateException, IOException
   {
     if(isOpen())
       throw new IllegalStateException();
@@ -254,7 +261,7 @@ public class RawSocket {
    * @exception IOException If the address cannot be bound.
    */
   public void bind(InetAddress address)
-    throws IllegalStateException, IOException
+          throws IllegalStateException, IOException
   {
     int scope_id = __getScopeId(address);
 
@@ -267,6 +274,22 @@ public class RawSocket {
     }
   }
 
+  private native static int __bindAfPacket(int socket, String device);
+
+  public void bindAfPacket(String device)
+          throws UnsupportedOperationException, IllegalStateException, IOException
+  {
+    if(!isOpen())
+      throw new IllegalStateException();
+
+    int result = __bindAfPacket(__socket, device);
+
+    if(result < 0)
+      __throwIOException();
+    else if(result > 0)
+      throw new UnsupportedOperationException();
+  }
+
   // Returns a positive value if unsupported operation.
   private native static int __bindDevice(int socket, String device);
 
@@ -286,7 +309,7 @@ public class RawSocket {
    * @exception IOException If the device cannot be bound.
    */
   public void bindDevice(String device)
-    throws UnsupportedOperationException, IllegalStateException, IOException
+          throws UnsupportedOperationException, IllegalStateException, IOException
   {
     if(!isOpen())
       throw new IllegalStateException();
@@ -434,7 +457,7 @@ public class RawSocket {
    * timed out or error occurred.
    */
   private native static
-    int __select(int socket, boolean read, int milliseconds);
+  int __select(int socket, boolean read, int milliseconds);
 
 
   /**
@@ -587,14 +610,14 @@ public class RawSocket {
    * @return The number of bytes read.
    */
   public int read(byte[] data, int offset, int length, byte[] address)
-    throws IllegalArgumentException, IOException, InterruptedIOException
+          throws IllegalArgumentException, IOException, InterruptedIOException
   {
     if(offset < 0 || length < 0 || length > data.length - offset)
       throw new IllegalArgumentException("Invalid offset or length.");
 
     if(address != null &&
-       ((__family == PF_INET && address.length != 4) ||
-        (__family == PF_INET6 && address.length != 16)))
+            ((__family == PF_INET && address.length != 4) ||
+                    (__family == PF_INET6 && address.length != 16)))
       throw new IllegalArgumentException("Invalid address length.");
 
     int result = 0;
@@ -605,9 +628,9 @@ public class RawSocket {
 
     if(result == 0)
       result =
-        (address == null ?
-         __recvfrom1(__socket, data, offset, length, __family) :
-         __recvfrom2(__socket, data, offset, length, __family, address));
+              (address == null ?
+                      __recvfrom1(__socket, data, offset, length, __family) :
+                      __recvfrom2(__socket, data, offset, length, __family, address));
 
     if(result < 0) {
       if(__isErrorEAGAIN())
@@ -621,21 +644,21 @@ public class RawSocket {
 
   /** Same as {@code read(data, 0, length, null);} */
   public int read(byte[] data, int offset, int length)
-    throws IllegalArgumentException, IOException, InterruptedIOException
+          throws IllegalArgumentException, IOException, InterruptedIOException
   {
     return read(data, offset, length, null);
   }
 
   /** Same as {@code read(data, 0, data.length, address);} */
   public int read(byte[] data, byte[] address)
-    throws IOException, InterruptedIOException
+          throws IOException, InterruptedIOException
   {
     return read(data, 0, data.length, address);
   }
 
   /** Same as {@code read(address, data, 0, data.length, null);} */
   public int read(byte[] data)
-    throws IOException, InterruptedIOException
+          throws IOException, InterruptedIOException
   {
     return read(data, 0, data.length, null);
   }
@@ -643,6 +666,8 @@ public class RawSocket {
   private native static int __sendto(int socket, byte[] data, int offset,
                                      int length, int family, byte[] address,
                                      int scope_id);
+  private native static int __sendeth(int socket, byte[] data, int offset,
+                                      int length, int family, String device);
 
   /**
    * Writes packet data to the socket.  The data should not include
@@ -660,7 +685,7 @@ public class RawSocket {
    * @return The number of bytes written.
    */
   public int write(InetAddress address, byte[] data, int offset, int length)
-    throws IllegalArgumentException, IOException, InterruptedIOException
+          throws IllegalArgumentException, IOException, InterruptedIOException
   {
     int scope_id = __getScopeId(address);
 
@@ -676,7 +701,7 @@ public class RawSocket {
 
     if(result == 0)
       result = __sendto(__socket, data, offset, length, __family,
-                        address.getAddress(), scope_id);
+              address.getAddress(), scope_id);
 
     if(result < 0) {
       if(__isErrorEAGAIN()) {
@@ -691,9 +716,36 @@ public class RawSocket {
 
   /** Same as {@code write(address, data, 0, data.length);} */
   public int write(InetAddress address, byte[] data)
-    throws IOException, InterruptedIOException
+          throws IOException, InterruptedIOException
   {
     return write(address, data, 0, data.length);
   }
 
+  public int writeEth(String device, byte[] data, int offset, int length)
+          throws IllegalArgumentException, IOException, InterruptedIOException
+  {
+    if(offset < 0 || length < 0 || length > data.length - offset) {
+      throw new IllegalArgumentException("Invalid offset or length.");
+    }
+
+    int result = 0;
+
+    if(getUseSelectTimeout() && __stimeout > 0) {
+      result = __select(__socket, false, __stimeout);
+    }
+
+    if(result == 0)
+      result = __sendeth(__socket, data, offset, length, __family, device);
+
+    if(result < 0) {
+      if(__isErrorEAGAIN()) {
+        __throwInterruptedIOException();
+      } else {
+        __throwIOException();
+      }
+    }
+
+    return result;
+  }
+
 }
diff --git a/rocksaw-1.1.0/src/jni/RawSocket.c b/rocksaw-1.1.0/src/jni/RawSocket.c
index f1f27bf..d457dc4 10644
--- a/rocksaw-1.1.0/src/jni/RawSocket.c
+++ b/rocksaw-1.1.0/src/jni/RawSocket.c
@@ -33,6 +33,9 @@
 #  include <sys/socket.h>
 #  include <unistd.h>
 #  include <sys/time.h>
+#  include <linux/if_packet.h>
+#  include <linux/if_ether.h>
+#  include <net/if.h>
 
 #  ifdef ROCKSAW_USE_POLL
 
@@ -122,6 +125,15 @@ init_sockaddr_in(JNIEnv *env, struct sockaddr_in *sin, jbyteArray address) {
   return (struct sockaddr *)sin;
 }
 
+static struct sockaddr*
+init_sockaddr_af_packet(JNIEnv *env, struct sockaddr_ll *sin, int ifindex) {
+  memset(sin, 0, sizeof(struct sockaddr_ll));
+  sin->sll_family = AF_PACKET;
+  sin->sll_protocol = htons(ETH_P_IP);
+  sin->sll_ifindex = ifindex;
+  return (struct sockaddr *)sin;
+}
+
 
 static struct sockaddr*
 init_sockaddr_in6(JNIEnv *env, struct sockaddr_in6 *sin6, jbyteArray address,
@@ -322,6 +334,30 @@ Java_com_savarese_rocksaw_net_RawSocket__1_1PF_1INET6
   return PF_INET6;
 }
 
+/*
+ * Class:     com_savarese_rocksaw_net_RawSocket
+ * Method:    __AF_PACKET
+ * Signature: ()I
+ */
+JNIEXPORT jint JNICALL
+Java_com_savarese_rocksaw_net_RawSocket__1_1AF_1PACKET
+(JNIEnv *env, jclass cls)
+{
+  return AF_PACKET;
+}
+
+/*
+ * Class:     com_savarese_rocksaw_net_RawSocket
+ * Method:    __ETH_P_IP
+ * Signature: ()I
+ */
+JNIEXPORT jint JNICALL
+Java_com_savarese_rocksaw_net_RawSocket__1_1ETH_1P_1IP
+(JNIEnv *env, jclass cls)
+{
+  return ETH_P_IP;
+}
+
 /*
  * Class:     com_savarese_rocksaw_net_RawSocket
  * Method:    __socket
@@ -363,6 +399,30 @@ Java_com_savarese_rocksaw_net_RawSocket__1_1bind
   return bind(socket, saddr, socklen);
 }
 
+/*
+ * Class:     com_savarese_rocksaw_net_RawSocket
+ * Method:    __bindAfPacket
+ * Signature: (II[B)I
+ */
+JNIEXPORT jint JNICALL
+Java_com_savarese_rocksaw_net_RawSocket__1_1bindAfPacket
+(JNIEnv *env, jclass cls, jint socket, jstring device)
+{
+  struct sockaddr *saddr;
+  socklen_t socklen;
+  union {
+    struct sockaddr_ll sin;
+  } sin;
+
+  const char *utf = (*env)->GetStringUTFChars(env, device, NULL);
+  int ifidx = if_nametoindex(utf);
+  (*env)->ReleaseStringUTFChars(env, device, utf);
+  socklen = sizeof(sin.sin);
+  saddr = init_sockaddr_af_packet(env, &sin.sin, ifidx);
+
+  return bind(socket, saddr, socklen);
+}
+
 /*
  * Class:     com_savarese_rocksaw_net_RawSocket
  * Method:    __bindDevice
@@ -402,6 +462,21 @@ Java_com_savarese_rocksaw_net_RawSocket_getProtocolByName
   return proto->p_proto;
 }
 
+/*
+ * Class:     com_savarese_rocksaw_net_RawSocket
+ * Method:    ifNametoindex
+ * Signature: (Ljava/lang/String;)I
+ */
+JNIEXPORT jint JNICALL
+Java_com_savarese_rocksaw_net_RawSocket_ifNametoindex
+(JNIEnv *env, jclass cls, jstring name)
+{
+  const char *utf = (*env)->GetStringUTFChars(env, name, NULL);
+  int idx = if_nametoindex(utf);
+  (*env)->ReleaseStringUTFChars(env, name, utf);
+  return idx;
+}
+
 
 /*
  * Class:     com_savarese_rocksaw_net_RawSocket
@@ -480,7 +555,7 @@ Java_com_savarese_rocksaw_net_RawSocket__1_1recvfrom1
   int result;
   jbyte *buf;
 
-  if(family != PF_INET && family != PF_INET6) {
+  if(family != PF_INET && family != PF_INET6 && family != AF_PACKET) {
     errno = EINVAL;
     return errno;
   }
@@ -602,6 +677,49 @@ Java_com_savarese_rocksaw_net_RawSocket__1_1sendto
   return result;
 }
 
+/*
+ * Class:     com_savarese_rocksaw_net_RawSocket
+ * Method:    __sendeth
+ * Signature: (I[BIII[B)I
+ */
+JNIEXPORT jint JNICALL
+Java_com_savarese_rocksaw_net_RawSocket__1_1sendeth
+(JNIEnv *env, jclass cls, jint socket,
+ jbyteArray data, jint offset, jint len, jint family, jstring device)
+{
+  int result;
+  jbyte *buf;
+  union {
+    struct sockaddr_ll sin;
+  } sin;
+  struct sockaddr *saddr;
+  socklen_t socklen;
+
+  if(family == AF_PACKET) {
+    const char *utf = (*env)->GetStringUTFChars(env, device, NULL);
+    int ifidx = if_nametoindex(utf);
+    (*env)->ReleaseStringUTFChars(env, device, utf);
+    socklen = sizeof(sin.sin);
+    saddr = init_sockaddr_af_packet(env, &sin.sin, ifidx);
+  } else {
+    errno = EINVAL;
+    return errno;
+  }
+
+  buf = (*env)->GetByteArrayElements(env, data, NULL);
+
+  result = sendto(socket, buf+offset, len, 0, saddr, socklen);
+
+  (*env)->ReleaseByteArrayElements(env, data, buf, JNI_ABORT);
+
+#if defined(_WIN32)
+  if(result < 0)
+    errno = WSAGetLastError();
+#endif
+
+  return result;
+}
+
 
 /*
  * Class:     com_savarese_rocksaw_net_RawSocket
