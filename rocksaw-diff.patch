diff --git a/build.properties b/build.properties
index cbb93d4..7f7d24a 100644
--- a/build.properties
+++ b/build.properties
@@ -76,8 +76,8 @@ jni.ldflags=
 javac.debug=on
 javac.optimize=off
 javac.deprecation=on
-javac.source=1.3
-javac.target=1.3
+javac.source=17
+javac.target=17
 javac.source.example=1.5
 javac.target.example=1.5
 javac.assertionFlag=-ea
diff --git a/src/java/com/savarese/rocksaw/net/RawSocket.java b/src/java/com/savarese/rocksaw/net/RawSocket.java
index 0335f4f..59bb067 100644
--- a/src/java/com/savarese/rocksaw/net/RawSocket.java
+++ b/src/java/com/savarese/rocksaw/net/RawSocket.java
@@ -42,6 +42,8 @@ public class RawSocket {

   private native static int __PF_INET();
   private native static int __PF_INET6();
+  private native static int __AF_PACKET();
+  private native static int __ETH_P_IP();

   /**
    * A protocol family constant for {@link #open} indicating IPv4.
@@ -54,6 +56,8 @@ public class RawSocket {
    * <em>This should be moved to another class.</em>
    */
   public static final int PF_INET6;
+  public static final int AF_PACKET;
+  public static final int ETH_P_IP;

   /**
    * Initializes any system resources used by the RockSaw library.
@@ -85,6 +89,8 @@ public class RawSocket {

     PF_INET  = __PF_INET();
     PF_INET6 = __PF_INET6();
+    AF_PACKET = __AF_PACKET();
+    ETH_P_IP = __ETH_P_IP();
   }

   private static final int __UNDEFINED = -1;
@@ -182,6 +188,7 @@ public class RawSocket {
    */
   public native static final int getProtocolByName(String name);

+
   private native static
   int __query_routing_interface(int socket, int family,
                                 byte[] destination, byte[] source);
@@ -267,6 +274,22 @@ public class RawSocket {
     }
   }

+  private native static int __bindAfPacket(int socket, String device);
+
+  public void bindAfPacket(String device)
+          throws UnsupportedOperationException, IllegalStateException, IOException
+  {
+    if(!isOpen())
+      throw new IllegalStateException();
+
+    int result = __bindAfPacket(__socket, device);
+
+    if(result < 0)
+      __throwIOException();
+    else if(result > 0)
+      throw new UnsupportedOperationException();
+  }
+
   // Returns a positive value if unsupported operation.
   private native static int __bindDevice(int socket, String device);

diff --git a/src/jni/RawSocket.c b/src/jni/RawSocket.c
index f1f27bf..037d59b 100644
--- a/src/jni/RawSocket.c
+++ b/src/jni/RawSocket.c
@@ -33,6 +33,9 @@
 #  include <sys/socket.h>
 #  include <unistd.h>
 #  include <sys/time.h>
+#  include <linux/if_packet.h>
+#  include <linux/if_ether.h>
+#  include <net/if.h>

 #  ifdef ROCKSAW_USE_POLL

@@ -122,6 +125,15 @@ init_sockaddr_in(JNIEnv *env, struct sockaddr_in *sin, jbyteArray address) {
   return (struct sockaddr *)sin;
 }

+static struct sockaddr*
+init_sockaddr_af_packet(JNIEnv *env, struct sockaddr_ll *sin, int ifindex) {
+  memset(sin, 0, sizeof(struct sockaddr_ll));
+  sin->sll_family = AF_PACKET;
+  sin->sll_protocol = htons(ETH_P_IP);
+  sin->sll_ifindex = ifindex;
+  return (struct sockaddr *)sin;
+}
+

 static struct sockaddr*
 init_sockaddr_in6(JNIEnv *env, struct sockaddr_in6 *sin6, jbyteArray address,
@@ -322,6 +334,30 @@ Java_com_savarese_rocksaw_net_RawSocket__1_1PF_1INET6
   return PF_INET6;
 }

+/*
+ * Class:     com_savarese_rocksaw_net_RawSocket
+ * Method:    __AF_PACKET
+ * Signature: ()I
+ */
+JNIEXPORT jint JNICALL
+Java_com_savarese_rocksaw_net_RawSocket__1_1AF_1PACKET
+(JNIEnv *env, jclass cls)
+{
+  return AF_PACKET;
+}
+
+/*
+ * Class:     com_savarese_rocksaw_net_RawSocket
+ * Method:    __ETH_P_IP
+ * Signature: ()I
+ */
+JNIEXPORT jint JNICALL
+Java_com_savarese_rocksaw_net_RawSocket__1_1ETH_1P_1IP
+(JNIEnv *env, jclass cls)
+{
+  return ETH_P_IP;
+}
+
 /*
  * Class:     com_savarese_rocksaw_net_RawSocket
  * Method:    __socket
@@ -363,6 +399,30 @@ Java_com_savarese_rocksaw_net_RawSocket__1_1bind
   return bind(socket, saddr, socklen);
 }

+/*
+ * Class:     com_savarese_rocksaw_net_RawSocket
+ * Method:    __bindAfPacket
+ * Signature: (II[B)I
+ */
+JNIEXPORT jint JNICALL
+Java_com_savarese_rocksaw_net_RawSocket__1_1bindAfPacket
+(JNIEnv *env, jclass cls, jint socket, jstring device)
+{
+  struct sockaddr *saddr;
+  socklen_t socklen;
+  union {
+    struct sockaddr_ll sin;
+  } sin;
+
+  const char *utf = (*env)->GetStringUTFChars(env, device, NULL);
+  int ifidx = if_nametoindex(utf);
+  (*env)->ReleaseStringUTFChars(env, device, utf);
+  socklen = sizeof(sin.sin);
+  saddr = init_sockaddr_af_packet(env, &sin.sin, ifidx);
+
+  return bind(socket, saddr, socklen);
+}
+
 /*
  * Class:     com_savarese_rocksaw_net_RawSocket
  * Method:    __bindDevice
@@ -402,6 +462,21 @@ Java_com_savarese_rocksaw_net_RawSocket_getProtocolByName
   return proto->p_proto;
 }

+/*
+ * Class:     com_savarese_rocksaw_net_RawSocket
+ * Method:    ifNametoindex
+ * Signature: (Ljava/lang/String;)I
+ */
+JNIEXPORT jint JNICALL
+Java_com_savarese_rocksaw_net_RawSocket_ifNametoindex
+(JNIEnv *env, jclass cls, jstring name)
+{
+  const char *utf = (*env)->GetStringUTFChars(env, name, NULL);
+  int idx = if_nametoindex(utf);
+  (*env)->ReleaseStringUTFChars(env, name, utf);
+  return idx;
+}
+

 /*
  * Class:     com_savarese_rocksaw_net_RawSocket
@@ -480,7 +555,7 @@ Java_com_savarese_rocksaw_net_RawSocket__1_1recvfrom1
   int result;
   jbyte *buf;

-  if(family != PF_INET && family != PF_INET6) {
+  if(family != PF_INET && family != PF_INET6 && family != AF_PACKET) {
     errno = EINVAL;
     return errno;
   }
